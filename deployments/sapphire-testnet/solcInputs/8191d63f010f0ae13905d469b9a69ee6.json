{
  "language": "Solidity",
  "sources": {
    "contracts/Admin.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\ncontract Admin {\n    address public admin;\n    bool public setup;\n\n    function _setAdmin(address _admin) internal {\n        require(!setup, \"Already setup\");\n        admin = _admin;\n        setup = true;\n    }\n\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"Only admin can call this function\");\n        _;\n    }\n\n    function transferAdmin(address newAdmin) public virtual onlyAdmin {\n        admin = newAdmin;\n    }\n}\n"
    },
    "contracts/PriceOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport \"./Admin.sol\";\n\ncontract PriceOracle is Admin {\n    uint256 public numTokens;\n    mapping(uint256 => address) private numTotokens;\n    mapping(address => uint256) private tokenToNum;\n\n    mapping(address => bool) private enabledTokens;\n    mapping(address => uint256) private priceUSD;\n\n    function init(address _admin) public {\n        _setAdmin(_admin);\n    }\n\n    function getPrice(address token) public view returns (uint256) {\n        require(enabledTokens[token], \"Not support token\");\n        return priceUSD[token];\n    }\n\n    function setPrice(\n        address[] calldata tokens,\n        uint256[] calldata prices\n    ) public onlyAdmin {\n        require(tokens.length == prices.length, \"Invalid input\");\n        for (uint256 i = 0; i < tokens.length; i++) {\n            priceUSD[tokens[i]] = prices[i];\n        }\n    }\n\n    function enableToken(address token) public onlyAdmin {\n        enabledTokens[token] = true;\n    }\n\n    function disableToken(address token) public onlyAdmin {\n        enabledTokens[token] = false;\n    }\n\n    function _addToken(address token) internal {\n        if (tokenToNum[token] > 0) {\n            return;\n        }\n        numTokens++;\n        numTotokens[numTokens] = token;\n        tokenToNum[token] = numTokens;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}